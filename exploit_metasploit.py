mport json
import subprocess
import csv
import os
 
def extract_vulnerabilities(json_file):
    """Extrait les vulnérabilités du fichier JSON généré par Wapiti."""
    try:
        with open(json_file, 'r') as file:
            data = json.load(file)
        vulnerabilities = []
        for vuln_category, vuln_list in data.get('vulnerabilities', {}).items():
            for vuln in vuln_list:
                vulnerabilities.append({
                    "category": vuln_category,
                    "path": vuln.get("path"),
                    "info": vuln.get("info"),
                    "curl_command": vuln.get("curl_command"),
                })
        return vulnerabilities
    except Exception as e:
        print(f"Erreur lors de l'extraction des vulnérabilités : {e}")
        return []
 
def get_metasploit_module(vuln_category):
    """Retourne un module Metasploit basé sur la catégorie de vulnérabilité."""
    modules = {
        "Content Security Policy Configuration": "auxiliary/scanner/http/http_version",  # Existent module
        "Clickjacking Protection": "auxiliary/scanner/http/clickjacking",  # Existent module
        "MIME Type Confusion": "auxiliary/scanner/http/mime",  # Existent module
        "Secure Flag cookie": "auxiliary/scanner/http/http_header",  # Existent module
        # Ajoutez d'autres correspondances selon les vulnérabilités possibles
    }
    return modules.get(vuln_category, None)
 
def create_msf_script(vulnerabilities, msf_script_file, host):
    """Crée un fichier de script pour Metasploit basé sur les vulnérabilités détectées."""
    with open(msf_script_file, 'w') as msf_file:
        for vuln in vulnerabilities:
            msf_module = get_metasploit_module(vuln['category'])
            if msf_module:
                msf_file.write(f"use {msf_module}\n")
                msf_file.write(f"set RHOSTS {host}\n")
                msf_file.write(f"set TARGETURI {vuln['path']}\n")
                msf_file.write("run\n")
                msf_file.write("sleep 5\n")
                msf_file.write(f"echo {vuln['category']},{vuln['path']},exploit_result >> metasploit_report.csv\n")
                msf_file.write("\n")
            else:
                msf_file.write(f"# Aucun module Metasploit trouvé pour {vuln['category']}\n")
                msf_file.write(f"echo {vuln['category']},{vuln['path']},no_msf_module >> metasploit_report.csv\n")
                msf_file.write("\n")
 
    print(f"Le script Metasploit a été créé : {msf_script_file}")
 
def run_msf_script(msf_script_file):
    """Exécute le script Metasploit."""
    try:
        subprocess.run(['msfconsole', '-r', msf_script_file], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Erreur lors de l'exécution du script Metasploit : {e}")
 
def create_csv_report(csv_file):
    """Crée un rapport CSV des vulnérabilités exploitées."""
    try:
        with open(csv_file, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Vulnerability", "Path", "Info", "Exploit Result"])
 
            # Lecture du rapport généré par Metasploit
            if os.path.exists("metasploit_report.csv"):
                with open("metasploit_report.csv", mode='r') as msf_report:
                    for line in msf_report:
                        writer.writerow(line.strip().split(','))
 
        print(f"Le rapport CSV a été généré : {csv_file}")
    except Exception as e:
        print(f"Erreur lors de la création du rapport CSV : {e}")
 
def main():
    # Remplacez par l'adresse IP ou le nom DNS de la cible
    host = "192.168.223.131"
    # Remplacez par le chemin réel du fichier JSON généré par Wapiti
    wapiti_json = "wapiti_scan_192.168.223.131.json"
    # Chemins pour les fichiers générés
    msf_script_file = "metasploit_script.rc"
    report_csv = "metasploit_final_report.csv"
 
    # Extraire les vulnérabilités du fichier JSON
    vulnerabilities = extract_vulnerabilities(wapiti_json)
    if not vulnerabilities:
        print("Aucune vulnérabilité détectée ou erreur lors de l'extraction.")
 
    # Créer le script Metasploit
    create_msf_script(vulnerabilities, msf_script_file, host)
    # Exécuter le script Metasploit
    run_msf_script(msf_script_file)
    # Générer le rapport CSV final
    create_csv_report(report_csv)
 
if __name__ == "__main__":
    main()
